require("dotenv").config();
const { Telegraf, Markup } = require('telegraf')
const bot = new Telegraf(process.env.BOT_TOKEN);
const cron = require('node-cron');
const chat_id = '-545281554';
const chat_id_Corp = '-1001426777808';
const convert = require('xml-js');
const fs = require('fs');
const trafficWeatherChat = require( './Componets/trafficWeatherChat.js');
const inn = require('./Componets/Inn.js');





const watzap = cron.schedule('*/60 09-18 * * 1-5', () => {
  bot.telegram.sendMessage(chat_id, '·¥®·¥©·¥è ô·¥á·¥©—å·¥õ·¥á  ô·¥Ä·¥õ…ú·¥Ä·¥®', Markup.inlineKeyboard([[Markup.button.callback("üëç 0", "likes:0")]]) );
  bot.telegram.sendMessage(chat_id_Corp, '·¥®·¥©·¥è ô·¥á·¥©—å·¥õ·¥á  ô·¥Ä·¥õ…ú·¥Ä·¥®', Markup.inlineKeyboard([[Markup.button.callback("üëç 0", "likes:0")]]) );
});
watzap.start();
const rezerv = cron.schedule('*/60 09-18 * * 1-5', () => {
  bot.telegram.sendMessage(chat_id_Corp, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤—ã', Markup.inlineKeyboard([[Markup.button.callback("üëç 0", "likes:0")]]) );
});
rezerv.start();

const schet = cron.schedule('*/60 09-18 * * 1-5', () => {
  bot.telegram.sendMessage(chat_id_Corp, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö', Markup.inlineKeyboard([[Markup.button.callback("üëç 0", "likes:0")]]) );
});
schet.start();

//–ü—Ä–∏–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã
bot.hears('–ü—Ä–∏–≤–µ—Ç', async ctx => {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name} —É–∑–Ω–∞—Ç—å —á—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /help`);
  }); 

  //  //–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ
  //  cron.schedule(translate('on mon tue wed thu fri at 09:00:00 every'), () => {
  //    trafficWeatherChat.trafficWeatherChat();
  //  });
 
  //–ö–æ–Ω–µ—Ü –¥–Ω—è
  cron.schedule('0 18 * * 1-5', () => {
    bot.telegram.sendMessage(chat_id, '–î–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω! –ù–µ –∑–∞–±—É–¥—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ë–∏—Ç—Ä–∏–∫—Å! \ud83d\ude09', trafficWeatherChat.trafficWeatherChat());
  });
  
  //–•–µ–ª–ø–µ—Ä
  bot.help((ctx) => ctx.reply('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–º–∞–Ω–¥:  \n –ù–∞–ø–∏—à–∏ –±–æ—Ç—É \ud83d\udc49 –ö—É—Ä—Å \n –ù–∞–ø–∏—à–∏ –±–æ—Ç—É \ud83d\udc49 –ü–æ–≥–æ–¥–∞ \n –ù–∞–ø–∏—à–∏ –±–æ—Ç—É \ud83d\udc49 –ü—Ä–æ–±–∫–∏ \n –ù–∞–ø–∏—à–∏ –±–æ—Ç—É \ud83d\udc49 –ù–æ–≤–æ—Å—Ç—å \n –ù–∞–ø–∏—à–∏ –±–æ—Ç—É \ud83d\udc49 –ò–ù–ù + —Ü–∏—Ñ—Ä—ã \n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –∞ –Ω–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ'));
 
  bot.on('sticker', ctx => {
    ctx.reply('–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä');
  });
//–ù–æ–≤–æ—Å—Ç—å
//   cron.schedule(translate('on mon tue wed thu fri at 10:00:00 every'), () => {
//  news.news();

//   });

  //–ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù
  bot.hears(/–ò–ù–ù/i, async (ctx) => {
    let Inn = ctx.message.text.replace('–ò–ù–ù', '');
    var id = `${ctx.from.id}`;
    inn.inn(Inn, id);
  });
  

 //–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
 bot.on('message', ctx => {
  (async () => {
    //–ü–æ–≥–æ–¥–∞ –∏ –ü—Ä–æ–±–∫–∏
    const getData = async () => {
      const response = await fetch("https://export.yandex.ru/bar/reginfo.xml?region=39");
      const data = await response.text();
      dataGlobal = data;
      return data;
    };
    var xml = await getData();
    var result = convert.xml2json(xml, { compact: true, spaces: 4 });
    var json = JSON.parse(result);
    var traffic = json.info.traffic;
    var weather = json.info.weather.day.day_part[0];
    var str = traffic.region.level._text;
    var num = Number(str);
    var level = (num === 0 ? num + ' –±–∞–ª–ª–æ–≤' :
      num === 1 ? num + ' –±–∞–ª–ª' :
        num >= 5 ? num + ' –±–∞–ª–ª–æ–≤' : num + ' –±–∞–ª–ª–∞');
    var icon = (traffic.region.icon._text === 'green' ? '\ud83d\udc9a' :
      traffic.region.icon._text === 'yellow' ? '\ud83d\udc9b' :
        traffic.region.icon._text === 'red' ? '\u2764\ufe0f' : ' ');
    if (ctx.message.text === '–ü–æ–≥–æ–¥–∞') {
      ctx.reply('–°–µ–π—á–∞—Å ' + weather.weather_type._text +
        ' –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + weather.temperature._text + ' ‚ÑÉ' + '\n' + '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞: ' + weather.wind_direction._text + ', —Å–∫–æ—Ä–æ—Å—Ç—å: ' + weather.wind_speed._text + ' m/c');
    } else if (ctx.message.text === '–ü—Ä–æ–±–∫–∏') {
      ctx.reply('–ü—Ä–æ–±–∫–∏: ' + level + ' ' + icon + " " + traffic.region.hint[0]._text);
    } else if (ctx.message.text === '–ö—É—Ä—Å') {
      fetch('https://www.cbr-xml-daily.ru/daily_json.js')
        .then(res => res.json())
        .then(json => {
          var kurs = json.Date.slice(0, 10)
          ctx.reply(`–ü–æ –¥–∞–Ω–Ω—ã–º –¶–ë–† –Ω–∞ ${kurs}: \ud83c\uddfa\ud83c\uddf8 ${json.Valute.USD.Value.toFixed(2)} ${json.Valute.USD.Value < json.Valute.USD.Previous ? '\ud83d\udd3b' : '\ud83d\udd3a'}` +
            ` \ud83c\uddea\ud83c\uddfa ${json.Valute.EUR.Value.toFixed(2)} ${json.Valute.EUR.Value < json.Valute.EUR.Previous ? '\ud83d\udd3b' : '\ud83d\udd3a'}`);
        });
    } else if (ctx.message.text === '–ù–æ–≤–æ—Å—Ç—å'){
      fs.readFile('Componets/object.json', (err, data) => {
        if (err) throw err
        let results = JSON.parse(data);
        ctx.replyWithHTML(`https://www.consultant.ru` + results[0].link)
       });
    }
  })
    (); 
});

//–†–ï–ê–ö–¶–ò–Ø
bot.action(/likes:([0-9]+)/, async (ctx) => {
  // //     let id_ms = ctx.update.callback_query.message.message_id
// //     let id_user = ctx.update.callback_query.from.username
// //    //—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   // function sayHi() {
//   //   connection.query("DELETE FROM users WHERE ms=?", [id_ms], function (err, row) {
//   //     if (row && row.length) {
//   //       console.log('–£–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã');
//   //       //–∑–∞–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
//   //       connection.end
//   //       console.log('–ó–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
//   //     }
//   //   })
//   // }
//   //  //—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –∏ —á–∞—Ç –±–æ—Ç–∞
//   // setTimeout(sayHi, 10 * 1000);
//   // setTimeout(() => ctx.deleteMessage(id_ms), 10 * 1000)
//     //–û—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
//     // connection.connect(function (err) {
//     //   if (err) {
//     //     return console.error('–æ—à–∏–±–∫–∞: ' + err.message);
//     //   }
//     //   console.log('–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL');
//     // });
//     // //–≤—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//     // connection.query("SELECT user, ms FROM users WHERE user = ? AND ms = ?", [id_user, id_ms], function (err, row) {
//     //   if (row && row.length) {
//     //     console.log('–≤—ã —É–∂–µ –∫–ª–∏–∫–∞–ª–∏');
//     //     //–∑–∞–∫—Ä—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
//     //     connection.end
//     //     console.log('–ó–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
//     //   } else {
//         //–∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
//         // const sql = `INSERT INTO users(user, ms) VALUES ("${id_user}", ${id_ms})`;
//         // connection.query(sql, function (err, results) {
//         //   if (err) console.log(err);
//         //   console.log('–£—Å–ø–µ—à–Ω–æ');
//         //   connection.end
//         //   console.log('–ó–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
//         // });

 ctx.answerCbQuery();
 let likes = +ctx.match[1] + 1;
 return ctx.editMessageReplyMarkup(
   Markup.inlineKeyboard(
     [
       [Markup.button.callback(`üëç ${likes}`, `likes:${likes}`)]
     ]
   ).reply_markup
 );
//   }
})


  // bot.on('edited_message', async ctx => {
  //   await ctx.reply(`${ctx.from.first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
  // })
 
 bot.launch();